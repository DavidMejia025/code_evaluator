/*
 * //String imageId = dockerClient.buildImageCmd(new File("src/test/resources")).withNoCache(true)
    //	    .exec(new BuildImageResultCallback()).awaitImageId();
 * List<SearchItem> dockerSearch = dockerClient.searchImagesCmd("ruby").exec();
 * //System.out.println("Search returned" + dockerSearch.toString());
    //System.out.println("...0...");

 *  List<Container> containers = dockerClient.listContainersCmd().exec();
    System.out.println(containers.toString());
List<Image> images = dockerClient.listImagesCmd().exec();

for(int i=0; i < images.size(); i++){
    System.out.println(images);
}
/* Verify if image already exist to not pull every time.
* image contains an attribute repoTags={ruby:1-slim} it will require some regex or similar tool
* How to get the image id from the pull.
dockerClient.pullImageCmd("ruby")
.exec(new PullImageResultCallback());

//ListImagesCmd lImages = listImagesCmd().withShowAll(true);
List<Image> images = dockerClient.listImagesCmd().exec();

for(int i=0; i < images.size(); i++){//ListImagesCmd lIm//ListImagesCmd lImages = listImagesCmd().withShowAll(true);
List<Image> images = dockerClient.listImagesCmd().exec();

for(int i=0; i < images.size(); i++){
    System.out.println(images);
}ages = listImagesCmd().withShowAll(true);
List<Image> images = dockerClient.listImagesCmd().exec();

for(int i=0; i < images.size(); i++){
    System.out.println(images);
}
    System.out.println(images);
}
//List<SearchItem> dockerSearch = dockerClient.searchImagesCmd("ruby").exec();
//System.out.println("Search returned" + dockerSearch.toString());
*/
// ListVolumesResponse volumesResponse = dockerClient.listVolumesCmd().exec();
//List<InspectVolumeResponse> volumes = volumesResponse.getVolumes();
//System.out.println(volumes);
//olume volume1 = new Volume("/my_test");

//CreateContainerResponse container = dockerClient.createContainerCmd("a2c34dc3f804")
   //.withVolumes(new Volume("/var/snap/docker/common/var-lib-docker/volumes/newTest"))
   //.withBinds(new Bind("/var/snap/docker/common/var-lib-docker/volumes/myNamedVolume/_data", new Volume("/opt/mytest")))
 //  .withCmd("true")
  // .exec();

//dockerClient.stopContainerCmd(newContainer).exec();

List<Container> containers = dockerClient.listContainersCmd().exec();
    System.out.println(containers.toString());

    ListVolumesResponse volumesResponse = dockerClient.listVolumesCmd().exec();
    List<InspectVolumeResponse> volumes = volumesResponse.getVolumes();
    System.out.println(volumes);


//dockerClient.pullImageCmd("bitnami/ruby").exec(new PullImageResultCallback());

    /* Why inspect image creates a container
     InspectImageResponse image = dockerClient.inspectImageCmd("24d3f886a21b").exec();

    System.out.println("start image");

    System.out.println(image);
    */


    /* Test for download image only onces
     Find how to find an image to avoid pull multiple times */
    List<Image> images = dockerClient.listImagesCmd().exec();

    for(int i=0; i < images.size(); i++){
        System.out.println(images);
    }
